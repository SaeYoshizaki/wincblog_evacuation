---
import type { Article, QiitaItemResponse, User} from "../../types";
import type { ZennPost } from "../../types";
import ArticleComponent from "./articleComponent.astro";
import Header from "../../components/Header/header.astro";
import { getUsers } from "../../libs/micro";
import Layout from "../../layouts/Layout.astro";
import ArticleList from "./_articles";

const response = await getUsers({fields: ["userName", "userImgSrc", "introduction", "zennId", "qiitaId", "gitUrl", "XUrl"]});

const Resusers:User[] = response.contents;

const apiToken = import.meta.env.QIITA_TOKEN as string;

export const fetchAllArticles = async (user: User, token: string) : Promise<Article[]> => {
    const response = await fetch(`https://qiita.com/api/v2/users/${user.qiitaId}/items`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  let articles: Article[] = [];
  if (!response.ok) {
    const errorDetails = await response.text();
    console.error(`Error: ${response.status} - ${response.statusText}`);
    console.error(`Details: ${errorDetails}`);
  } else {
    console.log(`${user} api request succeeded`);
    articles = (((await response.json()) as QiitaItemResponse[]).map(res => ({
        user: user, 
        title: res.title,
        published_at: res.created_at,
        updated_at: res.updated_at, 
        classification: "qiita.com",
        articleUrl: res.url
    })))
    
  }

  try {
    const response = await fetch(`https://zenn.dev/api/articles?username=${user.zennId}&order=latest`);
    if (!response.ok) {
      const errorDetails = await response.text();
      console.error(`Error: ${response.status} - ${response.statusText}`);
      console.error(`Details: ${errorDetails}`);
      return [];
    }

    const data = await response.json();
    if (!data.articles) {
      console.error('Expected articles field in response');
      return [];
    }

    articles = articles.concat((data.articles as ZennPost[]).map((article) => ({
        user: user,
        title: article.title,
        published_at: article.published_at,
        updated_at: article.body_updated_at,
        classification: 'zenn.dev',
        articleUrl: article.path,
    })));
  } catch (error) {
    console.error('An error occurred:', error);
  }

  return articles;
}

const allArticles: Article[] = ((await Promise.all(Resusers.map((user) => fetchAllArticles(user, apiToken)))).flat()).sort((a, b) => {
    return new Date(b.published_at).getTime() - new Date(a.published_at).getTime();
})

---
<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  a {
    text-decoration: none;
  }

  ul {
    margin: 0;
    padding: 0;
  }

  .articles-container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin: 20px 0;
    width: 100%;
  }

  .article-right {
    display: flex;
    justify-content: flex-end;
  }

  .article-left {
    display: flex;
    justify-content: flex-start;
  }

  .top-container {
    background-color: rgb(23, 25, 35);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .container {
    width: 66.67%; 
    margin: 0 auto;
    display: block;
  }

  h1 {
    text-align: center;
    color: white;
    margin: 15px 0;
    border-bottom: 1px solid white;
    font-size: 2rem;
  }

  .users-container {
    display: flex;
    overflow-x: scroll;
    padding: 20px;
    gap: 20px;
    white-space: nowrap; 
    scrollbar-width: none;
  }

  .users-container::-webkit-scrollbar {
    display: none; 
  }

  .user-card {
    width: 150px;
    flex: 0 0 200px; 
    background-color: rgb(33, 36, 48);
    border-radius: 10px;
    padding: 15px;
    text-align: center;
    justify-content: center;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
  }

  .user-card img {
    border-radius: 5%;
    width: 100px;
    height: 100px;
    margin: 0 auto;
    object-fit: cover;
  }

  .user-card h2 {
    font-size: 1.2rem;
    margin: 10px 0;
    color:white;
  }

  .user-card p {
  font-size: 0.9rem;
  color: rgb(150, 150, 150);
  word-wrap: break-word; 
  word-break: break-all; 
  max-height: 60px; 
  overflow: hidden; 
  text-overflow: ellipsis; 
  display: -webkit-box;
  -webkit-line-clamp: 3; 
  -webkit-box-orient: vertical;
}


  .load-more-btn {
    display: block;
    width: 100%;
    padding: 10px;
    background-color: #3f3f46;
    color: white;
    text-align: center;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    margin: 20px 0;
  }

  .detail {
    text-decoration: none;  
    color: white;
    position: relative;     
}

.detail:hover {
    text-decoration: none; 
}

.detail::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: -2px;           
    width: 100%;
    height: 2px;
    background-color: transparent;
    transition: background-color 0.3s ease;
}

.detail:hover::after {
    background-color: white; 
}


  @media (max-width: 1024px) {
    .articles-container {
      grid-template-columns: 1fr;
    }

    .user-card {
      width: 80%;
    }
  }

  @media (max-width: 480px) {
    h1 {
      font-size: 1.5rem;
    }

    .load-more-btn {
      font-size: 0.9rem;
      padding: 8px;
    }

    .user-card img {
      width: 80px;
      height: 80px;
    }
  }
</style>

<html style="display: block;">
  <head>
    <meta charset="UTF-8">
    <title>Qiita Articles</title>
  </head>
    
  <Layout title="articles">
    <body style="display: block;">
      <div class="top-container">
        <div class="container">
          <h1>Members</h1>
          <div class="users-container">
            {Resusers.map((user) => (
              <a href={(`/articles/user/${user.userName}`)}>
              <div class="user-card w-40 h-60">
                <img src={user.userImgSrc} alt={`${user.userName}'s avatar`} />
                <h2>{user.userName}</h2>
                <p>{user.introduction}</p>
              </div>
              </a>
              
              
            ))}
            
          </div>
          <div style="display: flex; align-items: center; justify-content: flex-end; width: fit-content;">
            <a href="/articles/users" class="detail" style="color: white; font-size: large; display: flex; align-items: center;">
              <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M16.175 13H5q-.425 0-.712-.288T4 12t.288-.712T5 11h11.175l-4.9-4.9q-.3-.3-.288-.7t.313-.7q.3-.275.7-.288t.7.288l6.6 6.6q.15.15.213.325t.062.375t-.062.375t-.213.325l-6.6 6.6q-.275.275-.687.275T11.3 19.3q-.3-.3-.3-.712t.3-.713z"/></svg>
              Detail
            </a>
          </div>
          <h1>Articles</h1>
    
          <!-- <div class="articles-container">
            {allArticles.map((article, index) => (
              index % 2 === 0 ? (
                <div class="article-right">
                  <ArticleComponent {...article} />
                </div>
              ) : (
                <div class="article-left">
                  <ArticleComponent {...article} />
                </div>
              )
            ))}
          </div> -->
          <ArticleList client:load articles={allArticles}  />
        </div>
      </div>
    </body>
  </Layout>
  
</html>
